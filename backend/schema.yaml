openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/product/:
    get:
      operationId: listProducts
      description: 'A viewset for viewing products. Provides ''list'' and ''retrieve''
        actions.


        This viewset automatically provides `list` and `retrieve` actions.

        It uses different serializers for the ''list'' and ''retrieve'' actions.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
          description: ''
      tags:
      - api
  /api/product/{id}/:
    get:
      operationId: retrieveProduct
      description: 'A viewset for viewing products. Provides ''list'' and ''retrieve''
        actions.


        This viewset automatically provides `list` and `retrieve` actions.

        It uses different serializers for the ''list'' and ''retrieve'' actions.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCard'
          description: ''
      tags:
      - api
  /auth/users/:
    get:
      operationId: listCustomUsers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    post:
      operationId: createCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
      tags:
      - auth
  /auth/users/me/:
    get:
      operationId: meCustomUser
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    put:
      operationId: meCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    patch:
      operationId: meCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    delete:
      operationId: meCustomUser
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - auth
  /auth/users/{id}/:
    get:
      operationId: retrieveCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    put:
      operationId: updateCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    patch:
      operationId: partialUpdateCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - auth
    delete:
      operationId: destroyCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - auth
  /api/product/{id}/cart/:
    post:
      operationId: cartProduct
      description: 'Add or remove a product from the shopping cart.


        Accessible only to authenticated users.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCard'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCard'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCard'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCard'
          description: ''
      tags:
      - api
    delete:
      operationId: cartProduct
      description: 'Add or remove a product from the shopping cart.


        Accessible only to authenticated users.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/product/{id}/favorite/:
    post:
      operationId: favoriteProduct
      description: 'Add or remove a product from the favorite list.


        Accessible only to authenticated users.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCard'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCard'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCard'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCard'
          description: ''
      tags:
      - api
    delete:
      operationId: favoriteProduct
      description: 'Add or remove a product from the favorite list.


        Accessible only to authenticated users.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this product.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /auth/users/activation/:
    post:
      operationId: activationCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
      tags:
      - auth
  /auth/users/resend_activation/:
    post:
      operationId: resendActivationCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - auth
  /auth/users/reset_password/:
    post:
      operationId: resetPasswordCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - auth
  /auth/users/reset_password_confirm/:
    post:
      operationId: resetPasswordConfirmCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
      tags:
      - auth
  /auth/users/reset_username/:
    post:
      operationId: resetUsernameCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - auth
  /auth/users/reset_username_confirm/:
    post:
      operationId: resetUsernameConfirmCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
      tags:
      - auth
  /auth/users/set_password/:
    post:
      operationId: setPasswordCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
      tags:
      - auth
  /auth/users/set_username/:
    post:
      operationId: setUsernameCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
      tags:
      - auth
  /auth/jwt/create/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - auth
  /auth/jwt/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - auth
  /auth/jwt/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
        no

        information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - auth
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u043F\u0440\
            \u043E\u0434\u0443\u043A\u0442\u0430"
          maxLength: 100
        image:
          type: string
          format: binary
          description: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438\
            \u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\
            \u0432\u0430\u0440\u0430"
        current_price:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100000000
          minimum: -100000000
          description: "\u0422\u0435\u043A\u0443\u0449\u0430\u044F \u0446\u0435\u043D\
            \u0430 \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u0430"
      required:
      - name
      - image
      - current_price
    ProductCard:
      type: object
      properties:
        name:
          type: string
          description: "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u043F\u0440\
            \u043E\u0434\u0443\u043A\u0442\u0430"
          maxLength: 100
        image:
          type: string
          format: binary
          description: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0438\
            \u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\
            \u0432\u0430\u0440\u0430"
        description:
          type: string
          description: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u043F\u0440\
            \u043E\u0434\u0443\u043A\u0442\u0430"
          maxLength: 500
        current_price:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100000000
          minimum: -100000000
          description: "\u0422\u0435\u043A\u0443\u0449\u0430\u044F \u0446\u0435\u043D\
            \u0430 \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u0430"
        sizes:
          type: array
          items:
            type: integer
          description: "\u0420\u0430\u0437\u043C\u0435\u0440\u044B \u043F\u0440\u043E\
            \u0434\u0443\u043A\u0442\u0430"
        colors:
          type: array
          items:
            type: integer
          description: "\u0426\u0432\u0435\u0442\u0430 \u043F\u0440\u043E\u0434\u0443\
            \u043A\u0442\u0430"
        category:
          enum:
          - T-shirts
          - Trousers
          - Shorts
          - Hoodie
          type: string
          description: "\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F \u043F\
            \u0440\u043E\u0434\u0443\u043A\u0442\u0430"
        reviews:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
                readOnly: true
              text:
                type: string
                description: "\u0422\u0435\u043A\u0441\u0442 \u043E\u0442\u0437\u044B\
                  \u0432\u0430 \u043E \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u0435"
              rating:
                type: integer
                maximum: 5
                minimum: 1
                description: "\u041E\u0446\u0435\u043D\u043A\u0430, \u043A\u043E\u0442\
                  \u043E\u0440\u0443\u044E \u043F\u043E\u043B\u044C\u0437\u043E\u0432\
                  \u0430\u0442\u0435\u043B\u044C \u043F\u043E\u0441\u0442\u0430\u0432\
                  \u0438\u043B \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u0443"
              created_at:
                type: string
                format: date-time
                readOnly: true
                description: "\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043C\
                  \u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043E\u0442\
                  \u0437\u044B\u0432\u0430"
            required:
            - text
          readOnly: true
      required:
      - name
      - image
      - description
      - current_price
      - sizes
      - colors
      - category
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - uid
      - token
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - uid
      - token
      - new_password
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
      required:
      - new_username
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - new_password
      - current_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
      required:
      - current_password
      - new_username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
